function doGet(request) {
  return HtmlService.createTemplateFromFile('Index').evaluate()
      .addMetaTag('viewport','width=device-width , initial-scale=1')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
}

function globalVariables(){ 
  var varArray = {
    spreadsheetId   : '17WVzv2cjxs1S-tEAfDLWfn4t1A8ldVb07x5VqAxDw5Q', 
    dataRage        : 'data!A2:F',                                    
    idRange         : 'data!A2:A',                                    
    lastCol         : 'F',                                            
    insertRange     : 'data!A1:F1',                                   
    sheetID         : '0'                                             
  };
  return varArray;
}


function processForm(formObject){  
  if(formObject.RecId && checkID(formObject.RecId)){//Execute if form passes an ID and if is an existing ID
    updateData(getFormValues(formObject),globalVariables().spreadsheetId,getRangeByID(formObject.RecId)); // Update Data
  }else{ //Execute if form does not pass an ID
    appendData(getFormValues(formObject),globalVariables().spreadsheetId,globalVariables().insertRange); //Append Form Data
  }
  return getLastTenRows();//Return last 10 rows
}


function getFormValues(formObject){

  if(formObject.RecId && checkID(formObject.RecId)){
    var values = [[formObject.RecId.toString(),
                   
                  formObject.RoomID,
                  formObject.Utype,
                  formObject.NameRoom,
                  formObject.RequestDate,
                  formObject.RData,
                  formObject.RData1]];
  }else{
    var values = [[new Date().getTime().toString(),
                   formObject.RoomID,
                  formObject.Utype,
                  formObject.NameRoom,
                  formObject.RequestDate,
                  formObject.RData,
                  formObject.RData1]];
  }
  return values;
}


/*
## CURD FUNCTIONS ----------------------------------------------------------------------------------------
*/


/* CREATE/ APPEND DATA */
function appendData(values, spreadsheetId,range){
  var valueRange = Sheets.newRowData();
  valueRange.values = values;
  var appendRequest = Sheets.newAppendCellsRequest();
  appendRequest.sheetID = spreadsheetId;
  appendRequest.rows = valueRange;
  var results = Sheets.Spreadsheets.Values.append(valueRange, spreadsheetId, range,{valueInputOption: "RAW"});
}


/* READ DATA */
function readData(spreadsheetId,range){
  var result = Sheets.Spreadsheets.Values.get(spreadsheetId, range);
  return result.values;
}


/* UPDATE DATA */
function updateData(values,spreadsheetId,range){
  var valueRange = Sheets.newValueRange();
  valueRange.values = values;
  var result = Sheets.Spreadsheets.Values.update(valueRange, spreadsheetId, range, {
  valueInputOption: "RAW"});
}


/*DELETE DATA*/
function deleteData(ID){ 
  var startIndex = getRowIndexByID(ID);
  
  var deleteRange = {
                      "sheetId"     : globalVariables().sheetID,
                      "dimension"   : "ROWS",
                      "startIndex"  : startIndex,
                      "endIndex"    : startIndex+1
                    }
  
  var deleteRequest= [{"deleteDimension":{"range":deleteRange}}];
  Sheets.Spreadsheets.batchUpdate({"requests": deleteRequest}, globalVariables().spreadsheetId);
  
  return getLastTenRows();//Return last 10 rows
}



/* 
## HELPER FUNCTIONS FOR CRUD OPERATIONS --------------------------------------------------------------
*/ 


/* CHECK FOR EXISTING ID, RETURN BOOLEAN */
function checkID(ID){
  var idList = readData(globalVariables().spreadsheetId,globalVariables().idRange,).reduce(function(a,b){return a.concat(b);});
  return idList.includes(ID);
}


/* GET DATA RANGE A1 NOTATION FOR GIVEN ID */
function getRangeByID(id){
  if(id){
    var idList = readData(globalVariables().spreadsheetId,globalVariables().idRange);
    for(var i=0;i<idList.length;i++){
      if(id==idList[i][0]){
        return 'data!A'+(i+2)+':'+globalVariables().lastCol+(i+2);
      }
    }
  }
}


function getRecordById(id){
  if(id && checkID(id)){
    var result = readData(globalVariables().spreadsheetId,getRangeByID(id));
    return result;
  }
}



function getRowIndexByID(id){
  if(id){
    var idList = readData(globalVariables().spreadsheetId,globalVariables().idRange);
    for(var i=0;i<idList.length;i++){
      if(id==idList[i][0]){
        var rowIndex = parseInt(i+1);
        return rowIndex;
      }
    }
  }
}


function getLastTenRows(){
  var lastRow = readData(globalVariables().spreadsheetId,globalVariables().dataRage).length+1;
  if(lastRow<=11){
    var range = globalVariables().dataRage;
  }else{
    var range = 'data!A'+(lastRow-9)+':'+globalVariables().lastCol;
  }
  var lastTenRows = readData(globalVariables().spreadsheetId,range);
  return lastTenRows;
}



function getAllData(){
  var data = readData(globalVariables().spreadsheetId,globalVariables().dataRage);
  return data;
}





function getDropdownList(range){
  var list = readData(globalVariables().spreadsheetId,range);
  return list;
}


function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename)
      .getContent();
}

function doGet(e) {
  if (!e.parameter.page) {
    var template = HtmlService.createTemplateFromFile('Index')
    return  template.evaluate().setSandboxMode(HtmlService.SandboxMode.IFRAME)
    .addMetaTag('viewport', 'width=device-width , initial-scale=1')
  }
  return HtmlService.createTemplateFromFile(e.parameter['page']).evaluate().setSandboxMode(HtmlService.SandboxMode.IFRAME)
    .addMetaTag('viewport', 'width=device-width , initial-scale=1')
}

function getUr2() {
  var ur2 = ScriptApp.getService().getUr2()
  return ur2
}

function getUrl() {
  var url = ScriptApp.getService().getUrl()
  return url
}

function uploadFiles(form) {
  try {

    var folder, folders = DriveApp.getFoldersByName(subFolder);

    if (folders.hasNext()) {
      folder = folders.next();
    } else {
      folder = folderDes.createFolder(subFolder);
    }
    
  
    
    

       
    var file = folder.createFile(form.myFile);
        file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.COMMENT);
    var url = file.getUrl()
    var ur2 = file.getUr2()
    var home = "https://script.google.com/macros/s/AKfycbyXMcQ2fGhjJE5noYySsnaFRtBRKXT6CHbcwIwZ2R2sibzQy5oS/exec";
    
    ss.appendRow([new Date(),  url ])
      
    ss.appendRow([new Date(),  ur2 ])
  } catch (error) {
    return error.toString();
  }

}



function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent()
}
